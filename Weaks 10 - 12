I watched https://www.youtube.com/watch?time_continue=79&v=nI5VdsVl0FM&feature=emb_title and learned about
    Task lists
    asigning issues 
    drag and drop in issues and commants
    then it went offer issues a lot and I alreaddy knew the information.
    
Then I watched youtube.com/watch?time_continue=3&v=gJDtC_tp5w4&feature=emb_title and learned about
    prerecieved hooks
         -Pre-receive hooks are scripts that run on the GitHub Enterprise Server appliance that you can use to implement quality checks.
         When a push occurs, each script runs in an isolated environment and can perform checks on the content of the push.
         The scripts will cause the push to be accepted if the exit status is 0, or rejected if the exit status is non-zero.
    statueses
         -The status API allows external services to mark commits with an error, failure, pending, or success state, which is 
         then reflected in pull requests involving those commits. Statuses can also include an optional description and target_url, 
         and we highly recommend providing them as they make statuses much more useful in the GitHub UI.
         As an example, one common use is for continuous integration services to mark commits as passing or failing builds using
         status. The target_url would be the full URL to the build output, and the description would be the high level summary of 
         what happened with the build. Statuses can include a context to indicate what service is providing that status. 
         For example, you may have your continuous integration service push statuses with a context of ci, and a security 
         audit tool push statuses with a context of security. You can then use the combined status endpoint to retrieve the 
         whole status for a commit. Note that the repo:status OAuth scope grants targeted access to statuses without also 
         granting access to repository code, while the repo scope grants permission to code as well as statuses.
    protected branches
        It prevents its creation, if not already created, from everybody except users with Maintainer permission.
        It prevents pushes from everybody except users with Allowed permission.
        It prevents anyone from force pushing to the branch.
        It prevents anyone from deleting the branch.

    I added definitions because I was kinda confused and now I can be remided.
    
 Then watched https://www.youtube.com/watch?time_continue=51&v=F1ss7Lv15cw&feature=emb_title and learned about:
  File searching and that github provides fuzzy matcheing.
  and that github documents and saves everything
 
 Then watched https://www.youtube.com/watch?time_continue=38&v=wq1LGr2j1Fw&feature=emb_title and learned about:
    Pulse
  -You can view an overview of a repository's activity through Pulse. Pulse includes a list of open and merged 
  pull requests, open and closed issues, and a graph showing the commit activity for the top 15 users who committed
  to the default branch of the project in the selected time period.
    Graphs
  A repository's graphs give you information on traffic, projects that depend on the repository, contributors and commits
  to the repository, and a repository's forks and network. If you maintain a repository, you can use this data to get a
  better understanding of who's using your repository and why they're using it.
  
  
This video was more amed for team managers and repository owners

Now I'm just listening to podcasts and pawsing it when I hear something new then looking it up.
      git config --global color.ui auto
          changes the color of the text.
      git status -sb
          shortense the branch header
      git config --global help.autocorrect
          autocorrecys typeos
      git add -p
          Allows you to stage only patches of the code to make commiting easier
      git lsf
          A way to save large fills in a remote location but have something in your repo pointing to it.
      git lsf prune
          Deletes files from your local repo when downloaded as a lsf
      git lsf prune -c
          same thing but checks first
      git lsf clone
          faster way of downloading
      ancor on line number
          How to add specific lines of code to an issue or commant so it's easier to find.
      code seach
          How to serch when there is a lot of information in a repository.
      
